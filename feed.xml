<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://x-zang.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://x-zang.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-18T17:41:02+00:00</updated><id>https://x-zang.github.io/feed.xml</id><title type="html">blank</title><subtitle>Computational Biology, Transcriptomics, and something. </subtitle><entry><title type="html">Publish Python packages to PyPI (pip)</title><link href="https://x-zang.github.io/posts/2024/11/Publish-Python-packages-to-PyPI/" rel="alternate" type="text/html" title="Publish Python packages to PyPI (pip)"/><published>2024-11-17T00:00:00+00:00</published><updated>2024-11-17T00:00:00+00:00</updated><id>https://x-zang.github.io/posts/2024/11/publish-to-pypi</id><content type="html" xml:base="https://x-zang.github.io/posts/2024/11/Publish-Python-packages-to-PyPI/"><![CDATA[<p>A step-by-step pipeline for uploading and publishing a Python package to <a href="https://pypi.org/">PyPI</a> that can be installed with <code class="language-plaintext highlighter-rouge">pip</code>. This pipeline includes the repo structure, py project configuration, building and publishing package.</p> <p>Note that more complex issues may arise if the package is a mixture of multiple languages such as Python and C++.</p> <h1 id="pre-requisites">Pre-requisites</h1> <p>We need Python3, <code class="language-plaintext highlighter-rouge">pip</code>, and an account on <a href="https://pypi.org/">PyPI</a>, with 2FA enabled. We also need the following packages, which can be installed with pip</p> <ul> <li>build</li> <li>hatch</li> <li>twine</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>build
pip <span class="nb">install </span>hatch
pip <span class="nb">install </span>twine
</code></pre></div></div> <h1 id="build-python-package">Build python package</h1> <h2 id="repository-dir-structure">Repository dir structure</h2> <p>The structure of my repo dir looks like this. All source code of my package <code class="language-plaintext highlighter-rouge">your_pack_name</code> is in the directory <code class="language-plaintext highlighter-rouge">src/your_pack_name</code>. Other first-level directories (e.g. <code class="language-plaintext highlighter-rouge">example</code> which contains small example test data) won’t be packaged or uploaded .</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── LICENSE
├── README.md
├── example
│   └── example.data
├── pyproject.toml
├── requirements.txt
└── src
    └── your_pack_name
        ├── __init__.py
        ├── main.py
        ├── source_file1.py
        ├── source_file2.py
        └── util.py
</code></pre></div></div> <p>Note that all source files should be organized in the <code class="language-plaintext highlighter-rouge">src/your_pack_name</code> directory, so that after installation, the relevant functions can be imported by <code class="language-plaintext highlighter-rouge">import your_pack_name</code>.</p> <p>Assuming that <code class="language-plaintext highlighter-rouge">main.py</code> is the entry point of your package when run from the command line (e.g. <code class="language-plaintext highlighter-rouge">python main.py --args something</code>).</p> <h2 id="__init__py"><code class="language-plaintext highlighter-rouge">__init__.py</code></h2> <p>An <code class="language-plaintext highlighter-rouge">__init__.py</code> file is necessary for Python to recognize the directory should be treated as a package, not just a regular folder with Python files.</p> <p>It should contain basic information such as <code class="language-plaintext highlighter-rouge">VERSION</code>, <code class="language-plaintext highlighter-rouge">AUTHOR</code>, and functions that are importable by other scripts.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># __init__.py
</span><span class="n">VERSION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0.1.0</span><span class="sh">"</span>

<span class="c1"># defines: "from your_pack_name import *"
</span><span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">func1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">class2</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># those two are importable
</span><span class="kn">from</span> <span class="n">.source_file1</span> <span class="kn">import</span> <span class="n">func1</span>
<span class="kn">from</span> <span class="n">.source_file2</span> <span class="kn">import</span> <span class="n">class2</span>

<span class="c1"># import main
</span><span class="kn">from</span> <span class="n">.main</span> <span class="kn">import</span> <span class="n">main</span>
</code></pre></div></div> <p>We also want to make an executable command for this package, which is essentially the <code class="language-plaintext highlighter-rouge">main()</code> function in <code class="language-plaintext highlighter-rouge">main.py</code> file. This can be configured in the <code class="language-plaintext highlighter-rouge">toml</code> file below.</p> <h2 id="configure-pyprojecttoml">Configure pyproject.toml</h2> <p>We need a configuration file <code class="language-plaintext highlighter-rouge">pyproject.toml</code> for <code class="language-plaintext highlighter-rouge">hatch</code> to build the package for us. An example looks like this:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># pyproject.toml</span>

<span class="nn">[build-system]</span>
<span class="py">requires</span>      <span class="p">=</span> <span class="p">[</span><span class="s">"hatchling"</span><span class="p">]</span>
<span class="py">build-backend</span> <span class="p">=</span> <span class="s">"hatchling.build"</span>

<span class="nn">[tool.hatch.build.targets.wheel]</span>
<span class="py">packages</span> <span class="p">=</span> <span class="p">[</span><span class="s">"src/your_pack_name"</span><span class="p">]</span>	

<span class="p">[</span><span class="err">project</span><span class="p">]</span>
<span class="py">name</span>        <span class="p">=</span> <span class="s">"your_pack_name"</span>	<span class="c"># name of your package, should not conflict with existing PyPI packages</span>
<span class="py">version</span>     <span class="p">=</span> <span class="s">"0.1.0"</span>
<span class="py">license</span>     <span class="p">=</span> <span class="s">"BSD-3-Clause"</span>  <span class="c"># license of your choice</span>
<span class="py">description</span> <span class="p">=</span> <span class="s">"your_pack_name is a py tool that needs short descriptions to modify here"</span> 
<span class="py">authors</span>     <span class="p">=</span> <span class="p">[</span>
  <span class="err">{</span> <span class="py">name</span><span class="p">=</span><span class="s">"Author 1"</span><span class="p">,</span> <span class="py">email</span><span class="p">=</span><span class="s">"author1@school.edu"</span> <span class="err">}</span><span class="p">,</span> 
  <span class="err">{</span> <span class="py">name</span><span class="p">=</span><span class="s">"Author 2"</span><span class="p">,</span> <span class="py">email</span><span class="p">=</span><span class="s">"author2@institute.org"</span> <span class="err">}</span><span class="p">,</span>
<span class="p">]</span>
<span class="py">dependencies</span>    <span class="p">=</span> <span class="p">[</span>
  <span class="py">"numpy&gt;</span><span class="p">=</span><span class="mf">1.0</span><span class="s">",  # dependencies, it is recommended to include versions of dependencies</span><span class="err">
</span>  <span class="s">"another dependency available in pypi"</span><span class="p">,</span>	<span class="c"># all dependencies should already be available in PyPI</span>
  <span class="s">"another dependency available in pypi"</span><span class="p">,</span>
<span class="p">]</span>
<span class="py">readme</span>          <span class="p">=</span> <span class="s">"README.md"</span>	<span class="c"># remember to edit the README</span>
<span class="py">requires-python</span> <span class="p">=</span> <span class="py">"&gt;</span><span class="p">=</span><span class="mf">3.7</span><span class="s">"</span><span class="err">
</span><span class="py">classifiers</span>     <span class="p">=</span> <span class="p">[</span>
  <span class="s">"Programming Language :: Python :: 3"</span><span class="p">,</span>
  <span class="s">"License :: OSI Approved :: BSD License"</span><span class="p">,</span>
<span class="p">]</span>
<span class="py">include</span> <span class="p">=</span> <span class="p">[</span>
    <span class="s">"src/your_pack_name/*.py"</span><span class="p">,</span>	<span class="c"># only those files will be packed</span>
<span class="p">]</span>

<span class="nn">[project.scripts]</span>
<span class="c"># If you want an executable command, e.g. "your_exctable_name --args something"</span>
<span class="c"># It has the effect as "python main.py --args something"</span>
<span class="py">"your_exctable_name"</span> <span class="p">=</span> <span class="s">"your_pack_name.main:main"</span>  	

<span class="p">[</span><span class="err">project.urls</span><span class="p">]</span>
<span class="py">"Homepage"</span> <span class="p">=</span> <span class="s">"https://your-github"</span>
<span class="py">"Bug Tracker"</span> <span class="p">=</span> <span class="s">"https://your-github/issues"</span>
</code></pre></div></div> <p>To test whether the <code class="language-plaintext highlighter-rouge">toml</code> file is valid. We can try to install our package to our own computer. Run this command from the same directory as <code class="language-plaintext highlighter-rouge">pyproject.toml</code> .</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nb">.</span>
</code></pre></div></div> <p>If the package is installed successfully and works as expected, we can continue to build and publish.</p> <h2 id="build-package">Build package</h2> <p>Lastly, build the package using <code class="language-plaintext highlighter-rouge">hatch</code> or <code class="language-plaintext highlighter-rouge">build</code>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># build with hatch</span>
hatch build	
<span class="c"># OR build with build</span>
python <span class="nt">-m</span> build 
</code></pre></div></div> <p>Then the built packages should be available in a new directory <code class="language-plaintext highlighter-rouge">dist</code>, as two files <code class="language-plaintext highlighter-rouge">your_pack_name.tar.gz</code> and <code class="language-plaintext highlighter-rouge">your_pack_name.whl</code> files. Those two files will be eventually uploaded to PyPI.</p> <p>Optionally, you can unzip <code class="language-plaintext highlighter-rouge">your_pack_name.tar.gz</code> file to ensure it contains all necessary files but no unwanted files.</p> <h1 id="publish-to-pypi">Publish to PyPI</h1> <h2 id="optional-test-publication-on-testpypi">Optional: test publication on TestPyPI</h2> <p>We can try if everything is right by first publish our package on <a href="https://test.pypi.org/">TestPyPI</a>, so that we won’t accidentally screw-up a production environment. Note that TestPyPI is a <strong>different</strong> space from PyPI, so a separate TestPyPI account is needed.</p> <p>Use <code class="language-plaintext highlighter-rouge">twine</code> to publish to testpypi. You will be prompted to enter your credentials.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>twine upload <span class="nt">--repository</span> testpypi dist/<span class="k">*</span>
</code></pre></div></div> <p>Let’s check whether your package can be installed from <a href="https://test.pypi.org/">TestPyPI</a>. Also you should search your package name on TestPyPI to ensure everything is correct.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">--index-url</span> https://test.pypi.org/simple/ your_pack_name
</code></pre></div></div> <h2 id="publish-to-pypi-1">Publish to PyPI</h2> <p>We will use <code class="language-plaintext highlighter-rouge">twine</code> to publish the compiled <code class="language-plaintext highlighter-rouge">dist</code> files to PyPI. You will be prompted to enter your credentials.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>twine upload <span class="nt">--repository</span> pypi dist/<span class="k">*</span>
</code></pre></div></div> <p>Let’s check whether your package can be installed from PyPI. Also, you should search your package name on PyPI to ensure everything is correct.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install  </span>your_pack_name
</code></pre></div></div> <p>Great! We just <strong>published</strong> a package to PyPI! If one is curious, statistics such as the number of downloads can be found on <a href="https://pepy.tech/">pepy</a> or <a href="https://pypistats.org/">pypistats</a>.</p> <h2 id="optional-pypi-api-token">Optional: PyPI API token</h2> <p>Although it’s OK to use passwords, using an API token is more convenient for frequent package updates/uploads.</p> <p>An API token can be generated in the <a href="https://pypi.org/manage/account/">Account settings</a> at the bottom of the webpage. Note that all tokens start with <code class="language-plaintext highlighter-rouge">pypi</code>. Since we use twine, it reads the token from <code class="language-plaintext highlighter-rouge">~/.pypirc</code>. We should edit the file like the following:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># in your $HOME/.pypirc file</span>
<span class="nn">[pypi]</span>
  <span class="py">username</span> <span class="p">=</span> <span class="err">__token__</span>
  <span class="py">password</span> <span class="p">=</span> <span class="err">pypi-your_new_token</span>
</code></pre></div></div> <p>From now on, <code class="language-plaintext highlighter-rouge">twine</code> won’t ask for the credentials anymore, but using the token from the <code class="language-plaintext highlighter-rouge">~/.pypirc</code> file.</p>]]></content><author><name></name></author><category term="python"/><category term="publication"/><summary type="html"><![CDATA[A step-by-step pipeline for uploading and publishing a Python package to PyPI that can be installed with pip. This pipeline includes the repo structure, py project configuration, building and publishing package.]]></summary></entry><entry><title type="html">Strandness of RNA-seq and Transcripts Explained</title><link href="https://x-zang.github.io/posts/2024/09/check-strandess/" rel="alternate" type="text/html" title="Strandness of RNA-seq and Transcripts Explained"/><published>2024-09-26T00:00:00+00:00</published><updated>2024-09-26T00:00:00+00:00</updated><id>https://x-zang.github.io/posts/2024/09/check-strandness</id><content type="html" xml:base="https://x-zang.github.io/posts/2024/09/check-strandess/"><![CDATA[<p>Two posts by <a href="https://rnabio.org/module-09-appendix/0009/12/01/StrandSettings/">Griffith Lab</a> and by <a href="https://littlebitofdata.com/en/2017/08/strandness_in_rnaseq/">Hong Zheng</a> are already pretty comprehensive in describing the strandness parameters of many tools. Here I make some notes for my own records.</p> <h1 id="strandness-of-rna-seq">Strandness of RNA-seq</h1> <p>Imagine we collected some RNA molecules, performed the sequencing experiments, and obtained a bunch of paired-end RNA-seq reads (respectively R1 and R2 for each end of one pair). Now we want to know whether R1 has the same sequence as the original RNA or R2 has the same sequence as the original RNA (but of course, the reads are shorter and erroneous compared to an RNA molecule). This is called <strong>strandness</strong> of RNA-seq.</p> <p>As of today, the mainstream of NGS (e.g. Illumina) technology is sequence-by-synthesis (SBS). Consequently, R1 and R2 must be from different strands of the RNA molecule, because they are synthesized from different directions! That means we have only 2 possibilities of strandness: (1) R1 is from sense-strand and R2 is form anti-sense-strand; or (2) R1 is from anti-sense strand and R2 is from sense-strand. Here we call the strand with the <em>same</em> sequences of the RNA as <em>sense</em> strand. Likewise, the strand that is reverse-complementary to the RNA is called <em>anti-sense</em> strand.</p> <h2 id="naming-conventions">Naming conventions</h2> <p>Most of the name conventions fall into two types: <code class="language-plaintext highlighter-rouge">rf/fr</code> for <code class="language-plaintext highlighter-rouge">strandness</code> and <code class="language-plaintext highlighter-rouge">first/second</code> for <code class="language-plaintext highlighter-rouge">library type</code>.</p> <p><strong>RF</strong>: The first read is <strong>R</strong>everse sequence of RNA and the second read is <strong>F</strong>orward sequence of RNA.</p> <p><strong>FR</strong>: The first read is <strong>F</strong>orward sequence of RNA and the second read is <strong>R</strong>everse sequence of RNA.</p> <p>The <code class="language-plaintext highlighter-rouge">first/second</code> library types can be somewhat confusing (at least I got confused a few times…). R1 of <code class="language-plaintext highlighter-rouge">first</code> stranded libraries are the same as the <em>anti-sense</em> strand and vice versa. This is because the sequenced substrates in RNA-seq technologies are (for most of the time) cDNAs. The first cDNA strand, which uses the RNA as template, is rev-comp to the RNA sequence. Then cDNA molecules can be synthesized to be double-stranded. Since cDNAs are double-stranded, this further divides technologies by whether:</p> <p><strong>first</strong>: sequencing the first cDNA strand (anti-sense)</p> <p><strong>second</strong>: sequencing the second cDNA strand (sense).</p> <p>Note that the first cDNA strand is reverse-complementary to the RNA molecule.</p> <h2 id="parameters-for-some-bioinformatics-tools">Parameters for some bioinformatics tools</h2> <p>Two tools, <a href="https://rseqc.sourceforge.net/#infer-experiment-py">infer_experiment.py</a> from RSeQC and <a href="https://github.com/signalbash/how_are_we_stranded_here">check_strandness</a> are easy-to-use tools for checking strandness.</p> <p>Assuming all reads are <em>paired</em> and sequenced <em>inwards</em>.</p> <table> <thead> <tr> <th>RNA</th> <th>5’ –&gt; 3’</th> <th>3’ –&gt; 5’</th> <th> </th> </tr> </thead> <tbody> <tr> <td>DNA</td> <td>coding/ sense strand</td> <td>noncoding/ anti-sense</td> <td> </td> </tr> <tr> <td>Reads</td> <td>R1 is a sub-string of RNA, R2 is rev-comp</td> <td>R2 is a sub-string of RNA, R1 is rev-comp</td> <td>Both R1 and R2 may be the same or rev-comp of a sub-string of RNA</td> </tr> <tr> <td>infer_experiment.py</td> <td>1++,1–,2+-,2-+</td> <td>1+-,1-+,2++,2–</td> <td> </td> </tr> <tr> <td>check_strandness</td> <td>FR/fr-secondstrand</td> <td>RF/fr-firststrand</td> <td> </td> </tr> <tr> <td>Kallisto</td> <td><code class="language-plaintext highlighter-rouge">--fr-stranded</code></td> <td><code class="language-plaintext highlighter-rouge">--rf-stranded</code></td> <td> </td> </tr> <tr> <td>Salmon</td> <td><code class="language-plaintext highlighter-rouge">--libType ISF</code></td> <td><code class="language-plaintext highlighter-rouge">--libType ISR</code></td> <td><code class="language-plaintext highlighter-rouge">--libType IU</code></td> </tr> <tr> <td>Scallop</td> <td><code class="language-plaintext highlighter-rouge">--library_type second</code></td> <td><code class="language-plaintext highlighter-rouge">--library_type first</code></td> <td><code class="language-plaintext highlighter-rouge">--library_type unstranded</code></td> </tr> <tr> <td>Stringtie</td> <td><code class="language-plaintext highlighter-rouge">--fr</code></td> <td><code class="language-plaintext highlighter-rouge">--rf</code></td> <td> </td> </tr> </tbody> </table> <h1 id="strand-of-transcripts">Strand of transcripts</h1> <p>Transcripts/RNAs also have “strand” information (e.g. the 7th column <code class="language-plaintext highlighter-rouge">strand</code> in a gtf file). It needs to be clarified that:</p> <ul> <li>strandness of RNA-seq: we are talking about which <strong>strand of RNA/cDNA</strong> the <strong>seq reads are from</strong>, the cRNA strand (i.e. rev-comp to RNA) or the direct-RNA strand (i.e. same sequence as RNA). The second strand of cDNA has the same sequence as the direct RNA, so computationally direct-RNA seq has the same strandness as “second-stranded”</li> <li>strand of transcripts: we are talking about which <strong>strand of the genome</strong> the <strong>gene/transcript is from</strong>. In other words, whether the RNA aligns to the forward sequence of the genome (<code class="language-plaintext highlighter-rouge">+</code> strand, same sequence as genome.fa file) or the RNA aligns to the reverse-complementary sequence of the genome (<code class="language-plaintext highlighter-rouge">-</code> strand, rev-comp to sequence of genome.fa file).</li> </ul> <p>The strand of a transcript can be inferred by using read alignment and strandness of reads, and vice versa.</p> <h2 id="sam-tags-ts-tx">SAM tags <code class="language-plaintext highlighter-rouge">ts</code>, <code class="language-plaintext highlighter-rouge">tx</code></h2> <p>Some splice-aware aligner outputs <a href="https://samtools.github.io/hts-specs/SAMtags.pdf">SAM tags</a> <code class="language-plaintext highlighter-rouge">ts</code> that indicates <em>which transcript strand the read is from</em>. This flag is usually inferred by checking the canonical intron splice motif of the reads without prior knowledge of the transcript information. Namely, <code class="language-plaintext highlighter-rouge">+</code> ts-tag means the read is from the same strand as the mRNA, and <code class="language-plaintext highlighter-rouge">-</code> ts-tag means the read if from the first cDNA strand (rev-comp to mRNA). Likewise, R1 of a paired and <em>fr-stranded</em> RNA-seq sample is supposed to have all <em>positive</em> ts tag, while R2 of the same sample has all <em>negative</em> ts tag. Reads from an unstranded sample may have roughly half reads assigned positive ts and half assigned negative ts.</p> <p>Some splice-aware aligners (e.g. <a href="https://physiology.med.cornell.edu/faculty/skrabanek/lab/angsd/lecture_notes/STARmanual.pdf">STAR</a> by setting <code class="language-plaintext highlighter-rouge">--outSAMstrandField intronMotif</code>) output SAM tags <code class="language-plaintext highlighter-rouge">xs</code> that indicate <em>strand of the RNA transcript</em>. Namely, this xs tag should be the same as the <code class="language-plaintext highlighter-rouge">strand</code> information in a gtf file of the same transcript. The information of ts and xs can be inferred by examining the read alignments. Obviously, if a read aligns to the positive-strand of the genome and it is from the positive strand of the RNA (positive ts), then the transcript should be from the positive strand of the genome (positive xs, positive strand in gtf). If a read aligns to the negative-strand of the genome and it is from the negative strand of the RNA (negative ts), then the transcript should still be from the positive strand of the genome (positive xs, positive strand in gtf), i.e. the double negation cancels out.</p> <p>In SAM/BAM format, bit <code class="language-plaintext highlighter-rouge">16</code> in a <a href="https://broadinstitute.github.io/picard/explain-flags.html">SAM FLAG</a> indicates whether a read aligns to the reverse strand of the genome (bit 16 set iff <code class="language-plaintext highlighter-rouge">-</code> strand; bit 16 unset iff <code class="language-plaintext highlighter-rouge">+</code> strand). Hence, considering all the tags and flags as Boolean values, <code class="language-plaintext highlighter-rouge">tx</code> is negative iff bit 16 and <code class="language-plaintext highlighter-rouge">ts</code> flag are the same; <code class="language-plaintext highlighter-rouge">tx</code> is positive iff bit 16 and <code class="language-plaintext highlighter-rouge">ts</code> flag are different.</p>]]></content><author><name></name></author><category term="rna-seq"/><category term="transcriptome"/><summary type="html"><![CDATA[Two posts by Griffith Lab and by Hong Zheng are already pretty comprehensive in describing the strandness parameters of many tools. Here I make some notes for my own records.]]></summary></entry><entry><title type="html">Anaconda getting started</title><link href="https://x-zang.github.io/posts/2021/12/conda-post/" rel="alternate" type="text/html" title="Anaconda getting started"/><published>2021-12-02T00:00:00+00:00</published><updated>2021-12-02T00:00:00+00:00</updated><id>https://x-zang.github.io/posts/2021/12/conda-tut-post</id><content type="html" xml:base="https://x-zang.github.io/posts/2021/12/conda-post/"><![CDATA[<p>This is an (oversimplified) tutorial on getting started on conda. It works for Linux and macOS. All scripts are in bash.</p> <p><strong>What is and why conda?</strong></p> <p>Since we are going to discuss issues of anaconda (conda, hereafter), why are we interested in conda? OK, first of all, what is conda? Here is what I cited from <a href="https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)">wiki</a>.</p> <blockquote> <p>Anaconda is a distribution of the Python and R programming languages for scientific computing (data science, machine learning applications, large-scale data processing, predictive analytics, etc.), that aims to simplify package management and deployment.”</p> </blockquote> <p>In short words, the first and foremost reason for me to turn to conda is to <strong>download and install packages</strong> (and their dependencies and dependencies of dependencies and depend… ) in a single easy step. A second but equally important reason is to <strong>manage environments for different projects</strong>. For example, I frequently use some tools on python 2, Julia 0.5 or R 2.X. Obviously, I don’t want those tools and their packages to mess up my current important project, so I can use conda to create different environments to separate those tools and side projects. Hence, I avoid conflicts and confusion.</p> <h1 id="initiation">Initiation</h1> <p>You need to do initiation only once.</p> <p>Type <code class="language-plaintext highlighter-rouge">conda info</code> in your terminal. If you see any errors instead of normal information about your conda environment, you need initiation. If you see <code class="language-plaintext highlighter-rouge">conda: command not found</code>, you need initiation. Depending on what computers you are using, you may do the following:</p> <p><strong>If on an administered server or supercomputer</strong></p> <p>Your administrator has likely installed <code class="language-plaintext highlighter-rouge">conda</code> for all users. Try to load the module. For example, on Penn State <a href="https://www.icds.psu.edu/computing-services/roar-user-guide/">Roar Supercomputer</a>, do <code class="language-plaintext highlighter-rouge">module load anaconda3</code>. Consult your administrator on how to load the module.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># load conda module</span>
module load anaconda3
<span class="c"># init for your $SHELL</span>
conda init bash
</code></pre></div></div> <p><strong>If installed locally or on a personal computer</strong></p> <p>First, install conda from https://www.anaconda.com/ (or it might have been installed by your labmate). Then:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># go to the conda directory</span>
<span class="nb">cd</span> /path/to/conda/dir
<span class="nb">cd </span>bin
<span class="c"># init</span>
./conda init bash
</code></pre></div></div> <p>After proper <code class="language-plaintext highlighter-rouge">init</code>, try <code class="language-plaintext highlighter-rouge">conda info</code> again. If no error pops, you are good. You need to do initialization only once.</p> <h1 id="configure-default-pkg-path">Configure default pkg path</h1> <p>This step is optional but probably saves you from future troubles.</p> <p>For most of the time, the <code class="language-plaintext highlighter-rouge">$HOME</code> directory has limited space, e.g. around 100M-10G. If your environment builds up, it runs out of space quickly. I would recommend avoiding storing any data, performing any experiments, or doing anything with large files in the <code class="language-plaintext highlighter-rouge">$HOME</code> directory. Only small configure files should be in <code class="language-plaintext highlighter-rouge">$HOME</code>.</p> <p>However, the default path of conda package cache is in <code class="language-plaintext highlighter-rouge">$HOME/.conda/pkg</code>. BAD! I recommend changing the default package cache directory to somewhere else on the disk. See https://docs.anaconda.com/anaconda/user-guide/tasks/shared-pkg-cache/</p> <p>Open and edit the conda configuration file (<code class="language-plaintext highlighter-rouge">$HOME/.condarc</code>. If not present, create one ) to add the following lines:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pkgs_dirs:  
 - /path/to/somewhere/on/disk
</code></pre></div></div> <p>Optionally, you can add your favorite channels to the configuration file.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>channels:  
 - bioconda   
 - conda-forge  
</code></pre></div></div> <h1 id="create-an-environment">Create an environment</h1> <p>You can create a new environment as needed, e.g. for a new project, for a tool with a conflicting version of dependencies, or for an older version of a package.</p> <p>Command to create an environment: (not recommended)</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> env_name
</code></pre></div></div> <p>This command creates a new environment named <code class="language-plaintext highlighter-rouge">env_name</code> (<code class="language-plaintext highlighter-rouge">-n</code> means name) in the default directory <code class="language-plaintext highlighter-rouge">$HOME/.conda/envs</code>. As mentioned, this might quickly exhaust all the space in your <code class="language-plaintext highlighter-rouge">$HOME</code> dir. I don’t like it.</p> <p>It is more recommended to create a new environment somewhere else (<code class="language-plaintext highlighter-rouge">-p</code> means prefix):</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-p</span> /some/other/dir/env_name
</code></pre></div></div> <p>Optionally, you can specify the version of your packages during creation, e.g. python 2.7 or R 3.4:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-p</span> /some/other/dir/env_name_py2 	 <span class="nv">python</span><span class="o">=</span>2.7
conda create <span class="nt">-p</span> /some/other/dir/env_name_R34	 <span class="nv">R</span><span class="o">=</span>3.4
</code></pre></div></div> <h1 id="activate--deactivate">Activate &amp; Deactivate</h1> <p>You need to activate an environment before using it.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># activate</span>
conda activate env_name
<span class="c"># or equivalently</span>
conda activate /some/other/dir/env_name
</code></pre></div></div> <p>To exit an environment, deactivate it:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda deactivate
</code></pre></div></div> <h1 id="install-packages">Install packages</h1> <p>Google for commands to install your packages. Most commands are like <code class="language-plaintext highlighter-rouge">conda install pkg_name</code>. Sometimes there is a <code class="language-plaintext highlighter-rouge">-c channel_name</code> argument to specify which channel to use. For example, to install <code class="language-plaintext highlighter-rouge">scallop</code> transcriptome assembler, you can use:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install</span> <span class="nt">-c</span> bioconda scallop
</code></pre></div></div> <h1 id="summary">Summary</h1> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create new environment</span>
conda create <span class="nt">-p</span> /some/other/dir/env_name

<span class="c"># use environment</span>
conda activate env_name
conda <span class="nb">install </span>pkg_name
conda deactivate
</code></pre></div></div> <p>Read more about using conda <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</a>.</p> <h1 id="misc">Misc</h1> <p>Sometimes conda may throw an error without further information (e.g. <code class="language-plaintext highlighter-rouge">conda unexpected error has occurred</code>). It could be because your <code class="language-plaintext highlighter-rouge">~/.condarc</code> is misconfigured. Make sure <code class="language-plaintext highlighter-rouge">.condarc</code> is in the correct form and try conda again. If the problem persists, you might want to clear index cache (<code class="language-plaintext highlighter-rouge">conda clean -i</code>).</p>]]></content><author><name></name></author><category term="conda"/><category term="python"/><summary type="html"><![CDATA[This is an (oversimplified) tutorial on getting started on conda. It works for Linux and macOS. All scripts are in bash.]]></summary></entry><entry><title type="html">Tutorial: RNA-seq short variant calling using GATK4</title><link href="https://x-zang.github.io/posts/2021/02/gatk-rna-snp/" rel="alternate" type="text/html" title="Tutorial: RNA-seq short variant calling using GATK4"/><published>2021-02-05T00:00:00+00:00</published><updated>2021-02-05T00:00:00+00:00</updated><id>https://x-zang.github.io/posts/2021/02/gatk-rna-snp</id><content type="html" xml:base="https://x-zang.github.io/posts/2021/02/gatk-rna-snp/"><![CDATA[<p>GATK is powerful. However, running it may not be as easy. People, especially bioinformatics beginners are often overwhelmed by its powerfulness and complexity.</p> <p>This repo is a tutorial of how to locally running the workflow for RNA-seq short variant calling (SNPs &amp; indels) using GATK4. The original workflow is available at <a href="https://github.com/gatk-workflows">gatk-workflows</a>/<strong><a href="https://github.com/gatk-workflows/gatk4-rnaseq-germline-snps-indels">gatk4-rnaseq-germline-snps-indels</a></strong>, developed by the GATK Team. This repo is made for my personal interest and record to make it easier to run GATK workflow. Root is not required if this tutorial is followed. The tutorial is made based on the <a href="https://github.com/gatk-workflows/gatk4-rnaseq-germline-snps-indels">GATK4 workflow repo</a>, <a href="https://gatk.broadinstitute.org/hc/en-us/articles/360035531192-RNAseq-short-variant-discovery-SNPs-Indels-">its best practice</a>, and the tutorial on <a href="https://gatk.broadinstitute.org/hc/en-us/articles/360035530952?id=12521">how to run GATK workflow</a>.</p> <p>Note: This is for GATK4 and may not be compatible with GATK3.8.</p> <p><strong>Last updated: Jul 2, 2020.</strong></p> <h1 id="install-gatk4">Install GATK4</h1> <p><strong>Download the latest release</strong> from GATK4 repository https://github.com/broadinstitute/gatk/releases. Downloading the pre-compiled binary file is the easiest installation. Requirements for GATK4 can be found form https://github.com/broadinstitute/gatk.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># download gatk</span>
<span class="c"># replace the link with latest gatk release from https://github.com/broadinstitute/gatk/releases</span>
wget https://github.com/broadinstitute/gatk/releases/download/4.1.8.0/gatk-4.1.8.0.zip
unzip gatk-4.1.8.0.zip
<span class="nb">cd </span>gatk-4.1.8.0
</code></pre></div></div> <p><strong>Install conda environment for GATK</strong>. On <a href="https://gatk.broadinstitute.org/hc/en-us/articles/360035889851--How-to-Install-and-use-Conda-for-GATK4">this page</a>, it is stated that the bioconda GATK installation does not configure the environment correctly. Then, it is necessary to manually create a conda environment and install GATK dependencies.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create a conda environment</span>
conda <span class="nb">env </span>create <span class="nt">-n</span> gatk <span class="nt">-f</span> gatkcondaenv.yml
<span class="c"># or </span>
conda <span class="nb">env </span>create <span class="nt">--prefix</span> ./path/to/directory/ <span class="nt">-f</span> gatkcondaenv.yml
<span class="c"># activate conda environment</span>
conda activate gatk
<span class="c"># or</span>
conda activate ./path/to/directory/
</code></pre></div></div> <p>You might also want to install <code class="language-plaintext highlighter-rouge">java-jdk</code> if it is not yet installed (<code class="language-plaintext highlighter-rouge">conda install -c cyclus java-jdk</code>).</p> <p>Also, have STAR installed in this environment.</p> <p>This is a convenient way of installing required conda dependencies of GATK. Sometimes it doesn’t work, e.g. conflicts. In case of conda not working, manually install the packages described in this file with <code class="language-plaintext highlighter-rouge">conda</code> and <code class="language-plaintext highlighter-rouge">pip</code>.</p> <h1 id="run-docker-without-root">Run Docker without root</h1> <p>Docker is required to run GATK4 workflow. Root is needed, but you can also run docker daemon without sudo (<a href="https://docs.docker.com/engine/security/rootless/">see docker docs for more details</a>). This section works for Ubuntu. Other OS may have some <a href="https://docs.docker.com/engine/security/rootless/#prerequisites">prerequisites</a>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://get.docker.com/rootless | sh

<span class="c"># At the end of the script, some environment variables are required to be set.</span>
<span class="c"># They would be displayed like the below examples, C&amp;P to run them.</span>
<span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span>unix:///run/user/1001/docker.sock
</code></pre></div></div> <p>Replace the number in <code class="language-plaintext highlighter-rouge">/run/user/1001/</code> with your uid, which can be retrieved using <code class="language-plaintext highlighter-rouge">id -u</code>. For example, if <code class="language-plaintext highlighter-rouge">id -u</code> outputs <code class="language-plaintext highlighter-rouge">1005</code>, the command should be <code class="language-plaintext highlighter-rouge">export DOCKER_HOST=unix:///run/user/1005/docker.sock</code>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># start/stop/restart docker without root using the following</span>
systemctl <span class="nt">--user</span> <span class="o">(</span>start|stop|restart<span class="o">)</span> docker
</code></pre></div></div> <h3 id="change-docker-root-directory">Change docker root directory</h3> <p>When running docker, I found it uses <code class="language-plaintext highlighter-rouge">$home/.local/share</code> as the root dir. This directory is in my <code class="language-plaintext highlighter-rouge">$home</code>, which is limited in space. I changed docker root dir following <a href="https://medium.com/@hsadanuwan/how-to-change-docker-default-data-directory-f884dac76c1f">this</a>, otherwise for my case, the disk can be full quickly and the process fails.</p> <p>Run <code class="language-plaintext highlighter-rouge">docker info</code>. The line starting with <code class="language-plaintext highlighter-rouge">Docker Root Dir</code> states the root directory of docker. I intend to change it to another directory in the disk. It can be configured by editing <code class="language-plaintext highlighter-rouge">docker.service</code> file.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># find the docker.service file</span>
locate docker.service
</code></pre></div></div> <p>Edit <code class="language-plaintext highlighter-rouge">docker.service</code> file. Find the <code class="language-plaintext highlighter-rouge">ExecStart</code> line and add <code class="language-plaintext highlighter-rouge">-g /customized/root/dir</code> to the end of this line.</p> <p>Now for me, this line looks like <code class="language-plaintext highlighter-rouge">ExecStart=/home/userid/bin/dockerd-rootless.sh --experimental --storage-driver=overlay2 -g /disk/userid/tools/docker-tmp</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># reload dockerd and restart docker</span>
systemctl <span class="nt">--user</span> daemon-reload
systemctl <span class="nt">--user</span> restart docker
</code></pre></div></div> <p>Run <code class="language-plaintext highlighter-rouge">docker info </code> again. I can see <code class="language-plaintext highlighter-rouge">Docker Root Dir: /disk/userid/tools/docker-tmp</code>. Then all’s set. Some other options can be found <a href="https://github.com/IronicBadger/til/blob/master/docker/change-docker-root.md">here</a></p> <h1 id="download-the-gatk4-workflow">Download the GATK4 workflow</h1> <p>Set up a working directory.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>gatk-workflows
<span class="nb">cd </span>gatk-workflows
</code></pre></div></div> <p>Download the latest releases of the workflow from <a href="https://github.com/gatk-workflows/gatk4-rnaseq-germline-snps-indels/releases">here</a>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># replace the following link with the latest release</span>
wget https://github.com/gatk-workflows/gatk4-rnaseq-germline-snps-indels/archive/1.0.0.tar.gz 
<span class="c"># change the .tar.gz file name if needed</span>
<span class="nb">tar</span> <span class="nt">-zxvf</span> 1.0.0.tar.gz
</code></pre></div></div> <h1 id="prepare-input-files">Prepare input files</h1> <p>Set up inputs directory, and put all necessary input files in this directory.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>inputs
</code></pre></div></div> <p>Download necessary file from Google Cloud Bucket of Broad Institute https://console.cloud.google.com/storage/browser/gcp-public-data–broad-references/ using browser or <a href="https://cloud.google.com/storage/docs/gsutil_install#linux">gsutil</a>. Most of the required references and databases can be found there. Make sure all of the files uses either one of UCSC names or Ensembl names.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># This is an example of how to download with gsutil</span>
gsutil <span class="nt">-m</span> <span class="nb">cp </span>gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf ./inputs/
</code></pre></div></div> <p>The input file format for GATK is <strong>unmapped bam</strong>. GATK <code class="language-plaintext highlighter-rouge">FastqToSam</code> can be used to convert fastq to unmapped bam.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gatk FastqToSam <span class="se">\</span>
<span class="nt">-F1</span> reads_R1.fastq <span class="se">\</span>
<span class="nt">-F2</span> reads_R2.fastq <span class="se">\</span>
<span class="nt">-O</span> reads.unmapped.bam <span class="se">\</span>
<span class="nt">--SAMPLE_NAME</span> sample001 <span class="se">\</span>
<span class="nt">--PLATFORM</span> ILLUMINA <span class="se">\</span>
<span class="nt">--READ_GROUP_NAME</span> group01 <span class="se">\</span>
<span class="nt">--SORT_ORDER</span> unsorted 
<span class="c"># --SORT_ORDER {unsorted, queryname, coordinate, duplicate, unknown}</span>
</code></pre></div></div> <p>Index and dictionary files (.fai/.dict/.idx) can be generated with samtools and igvtools</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>samtools faidx Homo_sapiens_assembly38.genome.fasta
samtools dict Homo_sapiens_assembly38.genome.fasta <span class="nt">-o</span> Homo_sapiens_assembly38.genome.dict 
igvtools index file.vcf 
</code></pre></div></div> <p><strong>Then edit the <code class="language-plaintext highlighter-rouge">.json</code> file (in the GATK workflow directory <code class="language-plaintext highlighter-rouge">gatk4-rnaseq-germline-snps-indels</code>) to replace the corresponding file paths with your local file paths.</strong></p> <p>Also replace the GATK path in the <code class="language-plaintext highlighter-rouge">.json</code> file with the directory where GATK4 is installed.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  "##_COMMENT5": "PATHS",
  "#RNAseq.gatk_path_override": "/path/to/gatk4",
</code></pre></div></div> <h4 id="edit-gatk4-rna-best-practiceswdl-file"><strong>Edit <code class="language-plaintext highlighter-rouge">gatk4-rna-best-practices.wdl</code> file</strong></h4> <p>I’m not sure if this step is necessary or correct, but it worked for me (version <code class="language-plaintext highlighter-rouge">gatk4-rnaseq-germline-snps-indels-1.0.0</code>). Read the following instructions, or directly replace the original one with my edited <code class="language-plaintext highlighter-rouge">.wdl</code> (version 1.0.0, see <a href="https://github.com/x-zang/gatk4-rnaseq-germline-snps-indels/blob/master/gatk4-rna-best-practices.wdl">this</a>).</p> <p>Search <code class="language-plaintext highlighter-rouge">BedToIntervalList </code> in the <code class="language-plaintext highlighter-rouge">gatk4-rna-best-practices.wdl</code> file. You can see a block of code like the following.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        ${gatk_path} \
            BedToIntervalList \
            -I=exome.fixed.bed \
            -O=${output_name} \
            -SD=${ref_dict}
</code></pre></div></div> <p>This section looks more like GATK3.8 commands but not GATK4’s, so I deleted the <code class="language-plaintext highlighter-rouge">=</code> sign behind <code class="language-plaintext highlighter-rouge">-I</code>, <code class="language-plaintext highlighter-rouge">-O</code>, <code class="language-plaintext highlighter-rouge">-SD</code> arguments. Then this block of code looks like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        ${gatk_path} \
            BedToIntervalList \
            -I exome.fixed.bed \
            -O ${output_name} \
            -SD ${ref_dict}
</code></pre></div></div> <p>Do the same to the <code class="language-plaintext highlighter-rouge">IntervalListTools</code> code block.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        ${gatk_path} --java-options "-Xms1g" \
            IntervalListTools \
            --SCATTER_COUNT ${scatter_count} \
            --SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW \
            --UNIQUE true \
            --SORT true \
            --INPUT ${interval_list} \
            --OUTPUT out
</code></pre></div></div> <p>And <code class="language-plaintext highlighter-rouge">MergeVcfs</code> (line 721):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        ${gatk_path} --java-options "-Xms2000m"  \
            MergeVcfs \
            --INPUT ${sep=' --INPUT ' input_vcfs} \
            --OUTPUT ${output_vcf_name}
</code></pre></div></div> <h1 id="execute-the-workflow">Execute the workflow</h1> <p>Everything should be all set so far. Download the <a href="https://github.com/broadinstitute/cromwell/releases">cromwell</a> program which will execute the GATK4 workflow. <code class="language-plaintext highlighter-rouge">cd</code> to the <code class="language-plaintext highlighter-rouge">gatk-workflows</code> directory.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/broadinstitute/cromwell/releases/download/51/cromwell-51.jar

<span class="c"># execute GATK4 workflow</span>
java <span class="nt">-jar</span> cromwell-51.jar run gatk4-rnaseq-germline-snps-indels-1.0.0/gatk4-rna-best-practices.wdl <span class="nt">--inputs</span> gatk4-rnaseq-germline-snps-indels-1.0.0/gatk4-rna-germline-variant-calling.inputs.json
</code></pre></div></div> <h1 id="references">References</h1> <p>https://github.com/gatk-workflows/gatk4-rnaseq-germline-snps-indels</p> <p>https://gatk.broadinstitute.org/hc/en-us/articles/360035531192-RNAseq-short-variant-discovery-SNPs-Indels-</p> <p>https://gatk.broadinstitute.org/hc/en-us/articles/360035530952?id=12521</p> <p>https://docs.docker.com/engine/security/rootless/</p>]]></content><author><name></name></author><category term="gatk"/><category term="rna-seq"/><category term="variation"/><summary type="html"><![CDATA[GATK is powerful. However, running it may not be as easy. People, especially bioinformatics beginners are often overwhelmed by its powerfulness and complexity.]]></summary></entry></feed>